run-name: First Workflow
on: pull_request
permissions:
  id-token: write # write permission is required for az login

jobs:
  
  plan:
    runs-on: ubuntu-latest
    environment: development-ro
    env:
      # Set environment variables for terraform init backend
      ARM_TENANT_ID: ${{vars.AZURE_TENANT_ID}}
      ARM_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}
      ARM_CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}
      ARM_USE_OIDC: true
      ARM_USE_AZUREAD: true # setting so that Storage Blob Data Owner can be used and listkeys action is not required
    defaults:
      run:
        working-directory: terraform/proj1
    permissions:
      pull-requests: write # write permission in order to add comments for terraform output
      id-token: write # write permission is required for az login
    steps:
    - name: Azure login
      uses: azure/login@v1
      with:
        client-id: ${{ vars.AZURE_CLIENT_ID }}
        tenant-id: ${{ vars.AZURE_TENANT_ID }}
        subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}

    - name: Confirm Login DEBUG
      uses: azure/CLI@v1
      with:
        azcliversion: latest
        inlineScript: |
          az account show        

    - uses: actions/checkout@v4
       
    - uses: hashicorp/setup-terraform@v3

    - name: Load Backend Configuration
      # Allows the usage of envrionemnt variables
      run: cat backend.conf >> ${GITHUB_ENV}

    - name: Terraform fmt
      id: fmt
      run: terraform fmt -check
      continue-on-error: true
    
    - name: Terraform Init
      # To run init ensure that the client id has Storage Blob Data Owner
      # TODO: Minimal permissions required to work, I don't like that the -ro client needs rw access to state storage account
      # Can a different container be used
      id: init
      run: terraform init -backend-config=backend.conf
    
    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color
    
    - name: Terraform Plan
      id: plan
      run: terraform plan -no-color -out=tfplan.out
      continue-on-error: true

    - name: Save Plan
      # Store the plan so it can be used in the apply
      uses: azure/cli@v1
      with:
        working-directory: terraform/proj1
        inlineScript: |
          ls -l
          az storage blob upload --auth-mode login -f  tfplan.out --account-name ${{ env.storage_account_name }} --container-name ${{ env.container_name }} --name ${{ github.sha }}.out
    
    - uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          // 1. Retrieve existing bot comments for the PR
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          })
          const botComment = comments.find(comment => {
            return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
          })
    
          // 2. Prepare format of the comment
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
          <details><summary>Validation Output</summary>
    
          \`\`\`\n
          ${{ steps.validate.outputs.stdout }}
          \`\`\`
    
          </details>
    
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
    
          <details><summary>Show Plan</summary>
    
          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`
    
          </details>
    
          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
    
          // 3. If we have a comment, update it, otherwise create a new one
          if (botComment) {
            github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: output
            })
          } else {
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
          }